; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:42179 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def a {"start" "A", "accept" ["B"], "transition" {"1" {"A" "B", "B" "B"}, "0" {"A"
                                                                                "A", "B" "A"}}})
#'logica-computacional-ep3.functions/a
clj꞉logica-computacional-ep3.functions꞉> 
a
{"start" "A", "accept" ["B"], "transition" {"1" {"A" "B", "B" "B"}, "0" {"A" "A", "B" "A"}}}
clj꞉logica-computacional-ep3.functions꞉> 
(a "start")
"A"
clj꞉logica-computacional-ep3.functions꞉> 
((a "transition"))
; Execution error (ArityException) at logica-computacional-ep3.functions/eval7804 (form-init14463808982315226042.clj:39).
; Wrong number of args (0) passed to: clojure.lang.PersistentArrayMap
clj꞉logica-computacional-ep3.functions꞉> 
((a "transition"))
((a "transition"))
(def lista)
#'logica-computacional-ep3.functions/lista
clj꞉logica-computacional-ep3.functions꞉> 
(def lista (list "1" "0" "1" "1" "0" "1" "0" "1" "1"))
#'logica-computacional-ep3.functions/lista
clj꞉logica-computacional-ep3.functions꞉> 
(def lista (list "1" "0" "1" "1" "0" "1" "0" "1" "1"))
#'logica-computacional-ep3.functions/lista
clj꞉logica-computacional-ep3.functions꞉> 
(final-state a lista)
"B"
clj꞉logica-computacional-ep3.functions꞉> 
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:44801 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(read-automaton-definition "/home/fluffyzera/poli/LogicaComputacional/logica-computacional-ep3/src/logica_computacional_ep3/example.json")
; Syntax error compiling at (output.calva-repl:78:1).
; Unable to resolve symbol: read-automaton-definition in this context
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil "1" "0" "1" "1" "0" "1" "0" "1" "1"
clj꞉logica-computacional-ep3.functions꞉> 
(read-automaton-definition "/home/fluffyzera/poli/LogicaComputacional/logica-computacional-ep3/src/logica_computacional_ep3/example.json")
{"start" "A", "accept" ["B"], "transition" {"1" {"A" "B", "B" "B"}, "0" {"A" "A", "B" "A"}}}
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton (read-automaton-definition "/home/fluffyzera/poli/LogicaComputacional/logica-computacional-ep3/src/logica_computacional_ep3/example.json"))
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
(final-state automaton "101101011")
"B"
clj꞉logica-computacional-ep3.functions꞉> 
"B"
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:38621 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
"1" "0" "1" "1" "0" "1" "0" "1" "1"
"1"
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(drop-while empty? ["" [] "foobar" "" "item"])
("foobar" "" "item")
clj꞉logica-computacional-ep3.functions꞉> 
(contains? [1 2 3] 1)
true
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la); nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:37199 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:41377 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
((ns logica-computacional-ep3.functions )
nil
clj꞉logica-computacional-ep3.functions꞉> 
(ns logica-computacional-ep3.functions 
; Syntax error (ClassNotFoundException) compiling at (output.calva-repl:1:7881).
; logica-computacional-ep3.functions
  clj꞉logica-computacional-ep3.functions꞉> 
  (sei-la )
; Execution error (ArityException) at logica-computacional-ep3.functions/eval7802 (form-init15694134051601081984.clj:175).
; Wrong number of args (0) passed to: logica-computacional-ep3.functions/sei-la
  clj꞉logica-computacional-ep3.functions꞉> 
  ())
; Syntax error macroexpanding clojure.core/ns at (output.calva-repl:171:1).
; (clj꞉logica-computacional-ep3.functions꞉>  (sei-la) clj꞉logica-computacional-ep3.functions꞉>  ()) - failed: Extra input spec: :clojure.core.specs.alpha/ns-form
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton (read-automaton-definition "/home/fluffyzera/poli/LogicaComputacional/logica-computacional-ep3/src/logica_computacional_ep3/nfa.json"))
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
automaton
{"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}}
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a"])
false
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:46769 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
automaton
{"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}}
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a"])
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q0  -  [a a]
b:  [q3 q1]  -  (a)
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q3  -  (a)
b:  nil  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q1  -  (a)
b:  [q2]  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q2  -  ()
b:  [q2]  -  ()
false
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:34431 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.core/automaton
clj꞉logica-computacional-ep3.core꞉> 
(sei-la automaton (automaton "start") ["a" "a"])
; Syntax error compiling at (output.calva-repl:255:1).
; Unable to resolve symbol: sei-la in this context
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a"])
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q0  -  [a a]
b:  [q3 q1]  -  (a)
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q3  -  (a)
b:  nil  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q1  -  (a)
b:  [q2]  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q2  -  ()
b:  [q2]  -  ()
here
false
clj꞉logica-computacional-ep3.functions꞉> 
(contains? (automaton "accept") "q2")
false
clj꞉logica-computacional-ep3.functions꞉> 
(automaton "accept")
["q2"]
clj꞉logica-computacional-ep3.functions꞉> 
(contains? ["q2"] "q2")
false
clj꞉logica-computacional-ep3.functions꞉> 
(some (automaton "accept") "q2")
; Execution error (IllegalArgumentException) at logica-computacional-ep3.functions/eval7811 (form-init127549429713220824.clj:286).
; Key must be integer
clj꞉logica-computacional-ep3.functions꞉> 
(contains? ["q2"] "q2")]
; Syntax error reading source at (REPL:222:3).
; Invalid token: a:
clj꞉logica-computacional-ep3.functions꞉> 
(contains? (set (automaton "accept")) "q2")
true
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:33495 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a"])
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q0  -  [a a]
b:  [q3 q1]  -  (a)
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q3  -  (a)
b:  nil  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q1  -  (a)
b:  [q2]  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q2  -  ()
b:  [q2]  -  ()
true
clj꞉logica-computacional-ep3.functions꞉> (sei-la automaton (automaton "start") ["a"])
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q0  -  [a]
b:  [q3 q1]  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q3  -  ()
b:  [q3]  -  ()
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q1  -  ()
b:  [q1]  -  ()
false
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a" "a"])
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q0  -  [a a a]
b:  [q3 q1]  -  (a a)
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q3  -  (a a)
b:  nil  -  (a)
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q1  -  (a a)
b:  [q2]  -  (a)
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q2  -  (a)
b:  nil  -  ()
false
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:41477 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a" "a"])
a:  {start q0, accept [q2], transition {a {q0 [q3 q1], q1 [q2]}}}  -  q0  -  [a a a]
b:  [q3 q1]  -  (a a)
; Execution error (ClassCastException) at logica-computacional-ep3.functions/sei-la (functions.clj:22).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:42305 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
(sei-la automaton (automaton "start") ["a" "a" "a"])
; Syntax error compiling at (output.calva-repl:407:1).
; Unable to resolve symbol: sei-la in this context
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a" "a"])
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q0  -  [a a a]
b:  [q3 q1]  -  (a a)
states-from:  {q0 [q3 q1], q1 [q2]}
; Execution error (ClassCastException) at logica-computacional-ep3.functions/sei-la (functions.clj:23).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉logica-computacional-ep3.functions꞉> 
(contains? {"q0" ["q3" "q1"], "q1" ["q2"]} "q2")
false
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:45147 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(def automaton {"start" "q0", "accept" ["q2"], "transition" {"a" {"q0" ["q3" "q1"], "q1" ["q2"]}}})
#'logica-computacional-ep3.functions/automaton
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a" "a"])
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q0  -  [a a a]
b:  [q3 q1]  -  (a a)
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q3  -  (a a)
b:  q3  -  (a)
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q  -  (a)
b:  q  -  ()
; Execution error (IllegalArgumentException) at logica-computacional-ep3.functions/sei-la (functions.clj:29).
; Don't know how to create ISeq from: java.lang.Character
clj꞉logica-computacional-ep3.functions꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Using host:port 127.0.0.1:37605 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉logica-computacional-ep3.core꞉> 
; Jack-in done.
clj꞉logica-computacional-ep3.core꞉> 
(ns logica-computacional-ep3.functions)
nil
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a" "a"])
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q0  -  [a a a]
b:  [q3 q1]  -  (a a)
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q3  -  (a a)
b:  [q3]  -  (a)
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q3  -  (a)
b:  [q3]  -  ()
states-from:  nil
a:  q3  -  ()
b:  [q3]  -  ()
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q1  -  (a a)
b:  [q2]  -  (a)
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q2  -  (a)
b:  [q2]  -  ()
states-from:  nil
a:  q2  -  ()
b:  [q2]  -  ()
true
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a" "a"])
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q0  -  [a a]
b:  [q3 q1]  -  (a)
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q3  -  (a)
b:  [q3]  -  ()
states-from:  nil
a:  q3  -  ()
b:  [q3]  -  ()
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q1  -  (a)
b:  [q2]  -  ()
states-from:  nil
a:  q2  -  ()
b:  [q2]  -  ()
true
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") ["a"])
states-from:  {q0 [q3 q1], q1 [q2]}
a:  q0  -  [a]
b:  [q3 q1]  -  ()
states-from:  nil
a:  q3  -  ()
b:  [q3]  -  ()
states-from:  nil
a:  q1  -  ()
b:  [q1]  -  ()
false
clj꞉logica-computacional-ep3.functions꞉> 
(sei-la automaton (automaton "start") [
])
states-from:  nil
a:  q0  -  []
b:  [q0]  -  ()
false
clj꞉logica-computacional-ep3.functions꞉> 
(def nfa2 (read-automaton-definition "/home/fluffyzera/poli/LogicaComputacional/logica-computacional-ep3/src/logica_computacional_ep3/nfa2.json"))
#'logica-computacional-ep3.functions/nfa2
clj꞉logica-computacional-ep3.functions꞉> 
nfa2
{"start" "q0", "accept" ["q0"], "transition" {"1" {"q0" ["q1"], "q1" ["q2"]}, "0" {"q1" ["q0" "q2"]}, "" {"q0" ["q2"]}}}
clj꞉logica-computacional-ep3.functions꞉> 
